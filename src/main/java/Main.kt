package rg.gmusic.GMusicImporter

import com.xenomachina.argparser.ArgParser
import com.xenomachina.argparser.mainBody
import com.github.felixgail.gplaymusic.api.GPlayMusic
import com.github.felixgail.gplaymusic.model.Playlist
import com.github.felixgail.gplaymusic.model.Track
import com.github.felixgail.gplaymusic.util.TokenProvider
import svarzee.gps.gpsoauth.AuthToken
import svarzee.gps.gpsoauth.Gpsoauth

fun main(args: Array<String>) = mainBody {
    ArgParser(args, helpFormatter = getHelpFormatter()).parseInto(::Args).run {
        println("You entering:")
        println("email: $email, password: $password, path: $musicDir")

        val ANDROID_ID = "35686800004141120" //emulate android client

        val localTracks = getLocalTracksFromDir(musicDir)

        val authToken: AuthToken

        try {
            authToken = TokenProvider.provideToken(email, password, ANDROID_ID)
        }
        catch (ex: Gpsoauth.TokenRequestFailed){
            println("Authorization failed. Please check your email and password. " +
                    "If you use two factor authentication, see help for how getting application password")
            throw ex
        }

        val api = GPlayMusic
                .Builder()
                .setAuthToken(authToken)
                .build()

        val searchingResult = searchLocalTracksInGMusic(api, localTracks, verbose)

        if (searchingResult.foundTracks.any()){
            api.playlistApi
                .create("GeneratedPlaylist", "This list generated by GMusicImporter", Playlist.PlaylistShareState.PRIVATE)
                .addTracks(*searchingResult.foundTracks.toTypedArray())
        }

        saveLocalTracksToFile(getSamePathWithAnotherFilename(musicDir, "notFoundPlaylist"), searchingResult.notFoundTracks)
    }
}

fun searchLocalTracksInGMusic(api: GPlayMusic, localTracks: Collection<LocalTrack>, viewLogs: Boolean = false): GMusicSearchResult {
    val foundTracks = mutableListOf<Track>()
    val notFoundTracks = mutableListOf<LocalTrack>()

    for (localTrack in localTracks){
        var found = false
        val searchResults = api.trackApi.search(localTrack.toString(), 100)

        if (viewLogs) println("Searching for: $localTrack | found: ${searchResults.count()}")

        for (sTrack in searchResults){
            if (viewLogs) println("    ${sTrack.artist} - ${sTrack.title}")

            if (sTrack.artist == localTrack.artist && sTrack.title == localTrack.title){
                foundTracks.add(sTrack)
                found = true
                if (viewLogs) println("Found!")
                break
            }
        }
        if (!found) notFoundTracks.add(localTrack)
    }

    return GMusicSearchResult(foundTracks, notFoundTracks)
}